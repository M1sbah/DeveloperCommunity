continue
mutually_connected_ids
continue
mutually_connected_ids
@connected_users
continue
@connected_users
mutually_connected_ids
continue
@total_connections.count
@connected_users.count
continue
get_connection(@user)
get_connection(current_user)
@muture_connections
continue
get_connection(current_user)
get_connection(user)
intersection(get_connection(user))
get_connection(current_user)
get_connection(current_user).intersection(get_connection(user))
continue
received_connections.pluck(:user_id)
requested_connections.pluck(:connected_user_id)
requested_connections
total_connections
received_connections.count
requested_connections
continue
total_connections
received_connections.count
requested_connections
continue
params
continue
connection_params
@connection
continue
connection.requested
continue
Date.today.month - start_date.month
start_date
end_date
continue
@work_experience.valid?
continue
e
continue
@u
continue
User.where("profile_title LIKE ?", "%" + p + "%").page(1).count
continue
User.all.class
@users.class
continue
@users
next
p
continue
params[:profile_title].upcase
continue
User.all.select{|user| user.profile_title.downcase.include?("java")}
u.downcase.include?"ruby"
u.downcase
u
u=User.first.profile_title
v
var v=User.first.profile_title
User.all.select{|user| user.profile_title.downcase.include?("java")}
continue
@users
continue
User.all.select{|user| user.profile_title.lowercase.include?'Java'}
@users
continue
@users
continue
params
continue
params
continue
@users
continue
User.select{|user| user.profile_title.include?(params[:profile_title])}.count
continue
User.select{|user| user.profile_title.include?(params[:profile_title])}
continue
params
@users
continue
params
continue
params
continue
params
continue
params[:q][:city_or_country_cont].present?
continue
params
continue
params[:q]?
params
continue
@test.first
continue
params[:q]["city_or_country_cont"].empty?
@q
continue
params
continue
user_params
continue
params
user_params
